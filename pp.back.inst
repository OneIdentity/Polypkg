# IRIX inst backend
#
# executables are either going to be mips3 or mips4 and N32 or elf64.
# so the package format is going to be mips3n32
# inst(1M) is the tool for installing packages
# gendist(1M) is the tool for making packages.
#   It takes a tree of files, a spec file and an idb file
#   The spec file is a text description like this:
#     include file
#     define variable value
#     product xx
#        attribute ...
#        image yy
#          attribute ...
#          subsystem zzz
#            attribute ...
#          endsubsys
#        endimage
#     endproduct
#
#   Attributes include
#      id "<title-string>"
#      version <number>
#      mach "<machtag>"
#
#   The idb file contains one line for each file or directory with
#   optional extra attributes
#      config([update|suggest|noupdate])
#      symval(<symlink-target>)
#      postop(cmd)
#

pp_platforms="$pp_platforms inst"

#@ pp_backend_inst_detect(uname_s): return true if matches uname on inst
pp_backend_inst_detect () {
    case "$1" in
	IRIX*)	return 0;;
	*)	return 1;;
    esac
}

#@ pp_backend_inst_init(): initialises platform variables for inst
pp_backend_inst_init () {
    pp_readlink_fn=pp_ls_readlink
}

pp_backend_inst_create_idb()
{
    typeset t m o g f p st

    while read t m o g f p st; do
        if test x"$o" = x"-"; then
            o="root"
        fi
        if test x"$g" = x"-"; then
            g="sys"
        fi
        case "$t" in
            f)  test x"$m" = x"-" && m=444
                echo "f 0$m $o $g $p $p $name.sw.base"
                ;;
            d)  test x"$m" = x"-" && m=555
                echo "d 0$m $o $g $p $p $name.sw.base"
                ;;
            s)  test x"$m" = x"-" && m=777
                test x"$m" = x"777" ||
                    pp_warn "$p: invalid mode $m for symlink, should be 777 or -"
                echo "l 0$m $o $g $p $p $name.sw.base symval($st)"
                ;;
        esac
    done
}

pp_backend_inst_create_spec()
{
    echo "product $name"
    echo "    id \"${summary}. Version: ${version}\""
    echo "    image sw"
    echo "        id \"Software\""
    echo "        version $version"
    echo "        order 9999"
    echo "        subsys base"
    echo "            id \"Base Software\""
    echo "            replaces self"
    echo "            exp $name.sw.base"
    echo "        endsubsys"
    echo "    endimage"
    echo "endproduct"
}

#@ pp_backend_inst(): processes output files to generate a package files
pp_backend_inst () {
    curdir=`pwd`

    cd "$pp_opt_wrkdir"

    # initialize
    pp_inst_tardist=tardist
    pp_inst_spec=${name}.spec
    pp_inst_idb=${name}.idb
 
    rm -rf $pp_inst_tardist $pp_inst_spec $pp_inst_idb
    mkdir -p $pp_inst_tardist

    # Create idb file
    (for _cmp in $pp_components; do
        cat  %files.$_cmp | sort +4u -6 | pp_backend_inst_create_idb
    done) >> $pp_inst_idb

    pp_backend_inst_create_spec >> $pp_inst_spec

    # Generate tardist
    gendist -verbose -all -root / -source $pp_opt_destdir -idb $pp_inst_idb -spec $pp_inst_spec -dist $pp_inst_tardist $name
    tar -cvf `pp_backend_inst_names` $pp_inst_tardist

    cd "$curdir"
}

#@ pp_backend_inst_cleanup(): removes any files created outside $pp_wrkdir
pp_backend_inst_cleanup () {
    :
}

#@ pp_backend_inst_names(): prints the paths to package files
#    each path should start with $name-$version
#    the package must be relative to the $pp_wrkdir directory
pp_backend_inst_names () {
    echo ${name}-${version}.tardist
}

#@ pp_backend_inst_install_script(component): generate helper install script
pp_backend_inst_install_script () {
    :
}

#@ pp_backend_inst_function(func): output one platform-dependent function
pp_backend_inst_function () {
    echo false
}

#@ pp_backend_inst_init_svc_vars(): initialise service vars
pp_backend_inst_init_svc_vars () {
    :
}

#@ pp_backend_inst_probe(): output local platform's short name
pp_backend_inst_probe () {
    cpu=`hinv|sed -n '/^CPU/{s/000 /k /;s/^CPU: //;s/ Process.*//;s/^MIPS //;p;q;}'|tr A-Z a-z`
    echo irix`uname -r`-$cpu
}

pp_backend_inst_vas_platforms () {
    echo "irix-65"
}
